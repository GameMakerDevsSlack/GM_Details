because of GM's weak typing, it's hard to tell when GM's using an int and when it's not
int64 will always make a number an integer using a signed integer datatype
if you use a bitwise operator of any kind, GM will cast to int64 internally
as for singles versus doubles for floats, GM uses both!
x = 16777216;
a = 16777216;
show_message( "0: x=" + string( x ) + ",a=" + string( a ) );
x += 1; a+= 1;
show_message( "1: x=" + string( x ) + ",a=" + string( a ) );
x += 1; a+= 1;
show_message( "2: x=" + string( x ) + ",a=" + string( a ) );
x += 1; a+= 1;
show_message( "3: x=" + string( x ) + ",a=" + string( a ) );
x += 1; a+= 1;
show_message( "4: x=" + string( x ) + ",a=" + string( a ) );

bang that into a Create event (or w/e)
you'll see that a increments but x doesn't
...the internal variables x, y, image_angle etc. are stored as single-precision
any variable you define yourself is stored as double-precision








Begin Step Event
Step Event
Movement due to internal variables (speed/direction etc.)
End Step Event

Pre Draw Event
per camera: {
  Draw Begin Event
  Draw Event
  Draw End Event
}
Post Draw Event
Draw GUI Begin Event
Draw GUI Event
Draw GUI End Event










cheat sheet for vertex format sizes:
position 2D - four bytes per dimension,  8 bytes overall - 2x f32
position 3D - four bytes per dimension, 12 bytes overall - 3x f32
texcoord    - four bytes per dimension,  8 bytes overall - 2x f32
normal      - four bytes per dimension, 12 bytes overall - 3x f32
colour      -  one byte  per dimension,  4 bytes overall - 4x u8
ONE triangle is THREE vertices in pr_trianglelist